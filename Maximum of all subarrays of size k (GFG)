# -6Companies30Days
// All the three questions are same:
// 1. Maximum of all subarrays of size k (GFG)
// 2. IPL 2021 - Match Day 2 (GFG)
// 3. 239. Sliding Window Maximum(Leet code)

// Naive approach
vector<int>ans;
        if(n==1)
        {
            int i=0;
            ans.push_back(arr[i]);
            return ans;
        }
        for(int i=0;i<=n-k;i++)
        {
         
            int maxi =INT_MIN;
            for(int j=i;j<=k+i-1;j++)
            {
                maxi = max(maxi,arr[j]);
            }
            ans.push_back(maxi);
        }
        return ans;
//This code is fine but it will give TLE so we need to optimize our code  

//****  Using Dequeue we can optimize our to O(n) time complexity  ****//

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
       int n = nums.size();
       deque<int>dq;
        vector<int>ans;
        for(int i=0;i<n;i++)
        {
            if(!dq.empty() && dq.front()==i-k)
            {
                dq.pop_front();
            }
            while(!dq.empty()&&nums[dq.back()]<nums[i])
            {
                dq.pop_back();
            }
            dq.push_back(i);
            if(i>=k-1)
            {
                ans.push_back(nums[dq.front()]);
            }
        }
        return ans;
    }
};
        
